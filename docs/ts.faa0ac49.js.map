{"version":3,"sources":["ts/Uniform.ts","ts/utils.ts","ts/createDepth.ts","ts/Fake3D.ts","shader/vertex.glsl","shader/fragment.glsl","ts/index.ts"],"names":["module","exports"],"mappings":"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","file":"ts.faa0ac49.js","sourceRoot":"../src","sourcesContent":["export default class Uniform {\n  name: string\n  suffix: string\n  program: WebGLProgram\n  gl: WebGLRenderingContext\n  location: WebGLUniformLocation\n\n  constructor(\n    name: string,\n    suffix: string,\n    program: WebGLProgram,\n    gl: WebGLRenderingContext\n  ) {\n    this.name = name\n    this.suffix = suffix\n    this.program = program\n    this.gl = gl\n    this.location = gl.getUniformLocation(program, name)\n  }\n\n  set(...values: any[]): void {\n    const method: string = `uniform${this.suffix}`\n    const args: any[] = [this.location].concat(values)\n    this.gl[method].apply(this.gl, args)\n  }\n}\n","export function loadImg(src: string): Promise<HTMLImageElement> {\n  return new Promise(\n    (\n      resolve: (image: HTMLImageElement) => void,\n      reject: (reson: any) => void\n    ): void => {\n      const img: HTMLImageElement = new Image()\n      img.crossOrigin = 'Anonymous'\n      img.addEventListener(\n        'load',\n        (event: Event): void => {\n          resolve(img)\n        },\n        false\n      )\n      img.addEventListener('error', (event: ErrorEvent): void => {\n        reject(event)\n      })\n      img.src = src\n    }\n  )\n}\n","import { loadImg } from './utils'\n\nconst min: number = 0\nconst max: number = 255\n\nexport async function createDepth(\n  imgSrc: string = './img/cat.jpg',\n  blur: number = 10\n): Promise<HTMLCanvasElement> {\n  const canvas: HTMLCanvasElement = document.createElement('canvas')\n  const context: CanvasRenderingContext2D = canvas.getContext('2d')\n  const image: HTMLImageElement = await loadImg(imgSrc)\n\n  canvas.width = image.naturalWidth\n  canvas.height = image.naturalHeight\n  context.filter = `blur(${blur}px)`\n  context.drawImage(image, 0, 0, canvas.width, canvas.height)\n  const imageData: ImageData = context.getImageData(\n    0,\n    0,\n    canvas.width,\n    canvas.height\n  )\n  const rgbaArr: Uint8ClampedArray = imageData.data\n  for (let i: number = 0, len: number = rgbaArr.length; i < len; i += 4) {\n    const r: number = rgbaArr[i + 0]\n    const g: number = rgbaArr[i + 1]\n    const b: number = rgbaArr[i + 2]\n    const a: number = rgbaArr[i + 3]\n\n    const avg: number = a ? Math.floor((r + g + b) / 3) : 0\n\n    rgbaArr[i + 0] = avg\n    rgbaArr[i + 1] = avg\n    rgbaArr[i + 2] = avg\n  }\n\n  context.putImageData(imageData, 0, 0)\n\n  return canvas\n}\n","import Uniform from './Uniform'\nimport { loadImg } from './utils'\nimport { createDepth } from './createDepth'\n\nexport default class Fake3D {\n  private canvas: HTMLCanvasElement\n  private context: WebGLRenderingContext\n  private container: HTMLCanvasElement\n  private startTime: number\n  private ratio: number\n  private winWidth: number\n  private winHeight: number\n  private vTh: number = 35\n  private hTh: number = 10\n  private program: WebGLProgram\n  private glContext: WebGLRenderingContext\n\n  private uResolution: Uniform\n  private uMouse: Uniform\n  private uTime: Uniform\n  private uRatio: Uniform\n  private uThreshold: Uniform\n\n  private positionLocation: number\n\n  private imgSrc: string\n\n  public dx: number = 0\n  public dy: number = 0\n\n  private blur: number\n\n  private texture: WebGLTexture\n  private imageAspect: number\n\n  constructor({\n    canvas,\n    vertexShaderSource,\n    fragmentShaderSource,\n    imgSrc,\n    blur = 10\n  }: {\n    canvas: HTMLCanvasElement\n    vertexShaderSource: string\n    fragmentShaderSource: string\n    imgSrc: string\n    blur?: number\n  }) {\n    this.blur = blur\n    this.imgSrc = imgSrc\n    this.canvas = canvas\n    this.glContext = this.canvas.getContext('webgl')\n    this.winWidth = window.innerWidth\n    this.winHeight = window.innerHeight\n\n    this.canvas.width = this.winWidth\n    this.canvas.height = this.winHeight\n\n    this.program = this.glContext.createProgram()\n    this.addShader(vertexShaderSource, this.glContext.VERTEX_SHADER)\n    this.addShader(fragmentShaderSource, this.glContext.FRAGMENT_SHADER)\n\n    this.glContext.linkProgram(this.program)\n    this.glContext.useProgram(this.program)\n\n    this.uResolution = new Uniform(\n      'resolution',\n      '4f',\n      this.program,\n      this.glContext\n    )\n    this.uMouse = new Uniform('mouse', '2f', this.program, this.glContext)\n    this.uTime = new Uniform('time', '1f', this.program, this.glContext)\n    this.uRatio = new Uniform('pixelRatio', '1f', this.program, this.glContext)\n    this.uThreshold = new Uniform(\n      'threshold',\n      '2f',\n      this.program,\n      this.glContext\n    )\n\n    const buffer: WebGLBuffer = this.glContext.createBuffer()\n    this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER, buffer)\n    this.glContext.bufferData(\n      this.glContext.ARRAY_BUFFER,\n      new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]),\n      this.glContext.STATIC_DRAW\n    )\n\n    this.positionLocation = this.glContext.getAttribLocation(\n      this.program,\n      'a_position'\n    )\n    this.glContext.enableVertexAttribArray(this.positionLocation)\n    this.glContext.vertexAttribPointer(\n      this.positionLocation,\n      2,\n      this.glContext.FLOAT,\n      false,\n      0,\n      0\n    )\n\n    this.uResolution.set(this.canvas.width, this.canvas.height, 1, 1)\n    this.uRatio.set(1 / this.ratio)\n    this.uThreshold.set(this.hTh, this.vTh)\n    this.glContext.viewport(\n      0,\n      0,\n      this.canvas.width * this.ratio,\n      this.canvas.height * this.ratio\n    )\n  }\n\n  public async bindTexture(): Promise<void> {\n    this.texture = await this.createTexture()\n    console.log(this.texture)\n    const depthTexture: WebGLTexture = await this.createTexture(true)\n\n    const u_image0Location = this.glContext.getUniformLocation(\n      this.program,\n      'image0'\n    )\n    const u_image1Location = this.glContext.getUniformLocation(\n      this.program,\n      'image1'\n    )\n\n    // set which texture units to render with.\n    this.glContext.uniform1i(u_image0Location, 0) // texture unit 0\n    this.glContext.uniform1i(u_image1Location, 1) // texture unit 1\n\n    this.glContext.activeTexture(this.glContext.TEXTURE0)\n    this.glContext.bindTexture(this.glContext.TEXTURE_2D, this.texture)\n    this.glContext.activeTexture(this.glContext.TEXTURE1)\n    this.glContext.bindTexture(this.glContext.TEXTURE_2D, depthTexture)\n\n    this.setup()\n  }\n\n  public render(): void {\n    if (!this.startTime) {\n      this.startTime = new Date().getTime()\n    }\n\n    const currentTime: number = (new Date().getTime() - this.startTime) / 1000\n    this.uTime.set(currentTime)\n    this.uMouse.set(this.dx, this.dy)\n    this.glContext.drawArrays(this.glContext.TRIANGLE_STRIP, 0, 4)\n  }\n\n  private addShader(source: string, type: number): void {\n    const shader: WebGLShader = this.glContext.createShader(type)\n    this.glContext.shaderSource(shader, source)\n    this.glContext.compileShader(shader)\n\n    if (\n      !this.glContext.getShaderParameter(shader, this.glContext.COMPILE_STATUS)\n    ) {\n      throw new Error(`error: ${this.glContext.getShaderInfoLog(shader)}`)\n    }\n\n    this.glContext.attachShader(this.program, shader)\n  }\n\n  private async createTexture(depth: boolean = false): Promise<WebGLTexture> {\n    const image: HTMLImageElement | HTMLCanvasElement = depth\n      ? await createDepth(this.imgSrc, this.blur)\n      : await loadImg(this.imgSrc)\n\n    if (image instanceof Image) {\n      this.imageAspect = image.naturalHeight / image.naturalWidth\n    }\n    image.style.width = '300px'\n    document.querySelector('.wrapper').appendChild(image)\n\n    const texture: WebGLTexture = this.glContext.createTexture()\n    this.glContext.bindTexture(this.glContext.TEXTURE_2D, texture)\n    this.glContext.texParameteri(\n      this.glContext.TEXTURE_2D,\n      this.glContext.TEXTURE_WRAP_S,\n      this.glContext.CLAMP_TO_EDGE\n    )\n    this.glContext.texParameteri(\n      this.glContext.TEXTURE_2D,\n      this.glContext.TEXTURE_WRAP_T,\n      this.glContext.CLAMP_TO_EDGE\n    )\n    this.glContext.texParameteri(\n      this.glContext.TEXTURE_2D,\n      this.glContext.TEXTURE_MIN_FILTER,\n      this.glContext.LINEAR\n    )\n    this.glContext.texParameteri(\n      this.glContext.TEXTURE_2D,\n      this.glContext.TEXTURE_MAG_FILTER,\n      this.glContext.LINEAR\n    )\n\n    // Upload the image into the texture.\n    this.glContext.texImage2D(\n      this.glContext.TEXTURE_2D,\n      0,\n      this.glContext.RGBA,\n      this.glContext.RGBA,\n      this.glContext.UNSIGNED_BYTE,\n      image\n    )\n\n    return texture\n  }\n\n  public setup(): void {\n    this.winWidth = window.innerWidth\n    this.winHeight = window.innerHeight\n    this.ratio = window.devicePixelRatio\n\n    this.canvas.width = this.winWidth * this.ratio\n    this.canvas.height = this.winHeight * this.ratio\n    this.canvas.style.width = `${this.winWidth}px`\n    this.canvas.style.height = `${this.winHeight}px`\n\n    if (this.winHeight / this.winWidth < this.imageAspect) {\n      this.uResolution.set(\n        this.winWidth,\n        this.winHeight,\n        1,\n        this.winHeight / this.winWidth / this.imageAspect\n      )\n    } else {\n      this.uResolution.set(\n        this.winWidth,\n        this.winHeight,\n        (this.winWidth / this.winHeight) * this.imageAspect,\n        1\n      )\n    }\n    this.uRatio.set(1 / this.ratio)\n\n    this.glContext.viewport(\n      0,\n      0,\n      this.winWidth * this.ratio,\n      this.winHeight * this.ratio\n    )\n  }\n}\n","module.exports=\"#define GLSLIFY 1\\nattribute vec2 a_position;\\n\\nvoid main() {\\n  gl_Position = vec4( a_position, 0, 1 );\\n}\\n\";","module.exports=\"#ifdef GL_ES\\n  precision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec4 resolution;\\nuniform vec2 mouse;\\nuniform vec2 threshold;\\nuniform float time;\\nuniform float pixelRatio;\\nuniform sampler2D image0;\\nuniform sampler2D image1;\\n\\nvec2 mirrored(vec2 v) {\\n  vec2 m = mod(v,2.);\\n  return mix(m,2.0 - m, step(1.0 ,m));\\n}\\n\\nvoid main() {\\n  // uvs and textures\\n  vec2 uv = pixelRatio*gl_FragCoord.xy / resolution.xy ;\\n  vec2 vUv = (uv - vec2(0.5))*resolution.zw + vec2(0.5);\\n  vUv.y = 1. - vUv.y;\\n  vec4 tex1 = texture2D(image1,mirrored(vUv));\\n  vec2 fake3d = vec2(vUv.x + (tex1.r - 0.5)*mouse.x/threshold.x, vUv.y + (tex1.r - 0.5)*mouse.y/threshold.y);\\n  gl_FragColor = texture2D(image0,mirrored(fake3d));\\n}\\n\";","import Fake3D from './Fake3D'\nimport vertexShaderSource from '../shader/vertex.glsl'\nimport fragmentShaderSource from '../shader/fragment.glsl'\nimport { createDepth } from './createDepth'\n\nlet fake3D: Fake3D\n\nasync function init(): Promise<void> {\n  fake3D = new Fake3D({\n    canvas: document.getElementById('canvas') as HTMLCanvasElement,\n    vertexShaderSource,\n    fragmentShaderSource,\n    imgSrc: './img/cat.jpg',\n    blur: 30\n  })\n\n  await fake3D.bindTexture()\n  render()\n}\n\ninit()\n\nfunction render() {\n  fake3D.dx = Math.cos(new Date().getTime() / 800) * 0.1\n  fake3D.dy = Math.sin(new Date().getTime() / 600) * 0.7\n\n  fake3D.render()\n  requestAnimationFrame(render)\n}\n"]}